<<app\Member.php>>

<?php

namespace App;

use Illuminate\Database\Eloquent\Model;
use App\user;

class Member extends Model
{
    protected $fillable = [
        'id', 'imagename', 'member_info'
    ];

    public $incrementing = false;

    public function user() {
        return $this->belongsTo(User::class);
    }
}

<<app\User.php>>

<?php

namespace App;

use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Passport\HasApiTokens;
use App\Member;

class User extends Authenticatable
{
    use Notifiable, HasApiTokens;

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'id', 'user_id', 'email', 'password', 'sex', 'name', 'lv'
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password', 'remember_token',
    ];

    /**
     * The attributes that should be cast to native types.
     *
     * @var array
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
    ];

    public function qnas()
    {
        return $this->hasMany(Qna::class);
    }

    public function replies()
    {
        return $this->hasMany(Reply::class);
    }

    public function member() {
        return $this->hasOne(Member::class);
    }
}

app\Controllers\MemberController

<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Member;
use App\User;
use Illuminate\Support\Facades\Auth;
use File;

class MemberController extends Controller
{
    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */

    public function index()
    {
        return response()->json(['member'=>Member::with('user')->get()]);
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        $member = new Member();
        return response()->json(['member'=>$member->with('user')->where('user_id', $id)->get()]);
    }

    public function store(Request $request)
    {
        $id = $request->id;
        $member_info = $request->member_info;
        $image = $request->image;

        $imagename = time().'.'.$request->image->getClientOriginalExtension();  
        $request->image->move(public_path('images'), $imagename);

        $member = User::findOrFail($id)->member()->create([
            'id'=>$id,
            'member_info'=>$member_info,
            'imagename'=>$imagename,
        ]);

        return response()->json('success');
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        $id = $request->id;
        $member_info = $request->member_info;
        $image = $request->image;

        $members = new Member;
        $member = $members->find($id);

        $image_path = public_path('images').'/'.$member->imagename;

        if (File::exists($image_path)) {
            File::delete($image_path);
        }

        $imagename = time().'.'.$request->image->getClientOriginalExtension();
        $request->image->move(public_path('images'), $imagename);

        $member->member_info = $request->member_info;
        $member->imagename = $imagename;
        $member->save();

        return response()->json('success');
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        $members = new Member();
        $member = $members->find($id);

        $image_path = public_path('images').'/'.$member->imagename;

        if (File::exists($image_path)) { 
            File::delete($image_path);
        }

        $member->delete();
        
        return response()->json(['member'=>$members->with('user')->get()]);
    }
}

<<migrations>>

<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateMembersTable extends Migration
{
    /**
     * Run the migrations.
     *
     * @return void
     */
    public function up()
    {
        Schema::create('members', function (Blueprint $table) {
            $table->BigInteger('id');
            $table->unsignedBigInteger('user_id')->index();
            $table->string('imagename');
            $table->string('member_info');
            $table->timestamps();
            
            $table->foreign('user_id')->references('id')->on('users')->onUpdate('cascade')->onDelete('cascade');
        });
    }

    /**
     * Reverse the migrations.
     *
     * @return void
     */
    public function down()
    {
        Schema::dropIfExists('members');
    }
}

<<components\MemberCreate.vue>>

<template>
    <div class="all">
        <div class="body">
            <section class="MOD_ACCORDION1">
                <div data-layout="_r">
                    <div data-layout="al16">
                        <div class="AP_accordion" role="tablist"> 
                            <div> <!-- 로그인 세션 불러와 넣기 -->
                            <p class="AP_accordion_tab" role="tab" data-theme="_bgp1" tabindex="0">생성하기</p>
                            <div class="AP_accordion_panel" role="tabpanel"> <!-- 화면 상에 보여지는 탭 -->
                                <img src="/image/bird.jpg" class="mem1"> <!-- 탭 클릭했을 때 보이는 조원1의 배경사진 -->
                                <div id="member_member1Hidden"> <!-- 탭을 클릭 했을 때 보이는 조원1의 사진, 이름, 한줄소개 -->
                                    <img :src="uploadImageFile" id="member_member1Image"><br />
                                    이름 : <p>하잇!</p> <!-- 로그인 유저 아이디 -->
                                    소개 : <input type="text" v-model="member_info" placeholder="소개글 작성하기"> <br />
                                    이미지 : <input id="image" type="file" v-on:change="onImageChange"> <br />
                                    <input type="button" value="생성하기" @click="create" id="1"> <!-- session -->
                                    <input type="button" value="뒤로가기" @click="back">
                                </div>
                            </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
        </div>
    </div>
</template>
<script>
export default {
    data() {
        return {
            member_info : '',
            image : '',
            class : '',
            uploadImageFile : ''
        }
    },
    mounted() {
        console.log('Component mounted.')
    },
    methods: {
        back() {
            this.$router.push('/member')
        },
        onImageChange(e){ // 이미지 파일 찾아내기
            this.image = e.target.files[0]
            var input = e.target;
            if(input.files && input.files[0]) {
                var reader = new FileReader();
                reader.readAsDataURL(input.files[0]);

                reader.onload = (e) => {
                    this.uploadImageFile = e.target.result; // 로컬 이미지 보여주기 

                }
            }
        },
        create(e) { // 생성하기 및 수정하기
            e.preventDefault()
            let config = {
                headers: {
                    contentType: "multipart/form-data", 
                }
            }

            const form = new FormData()
            
            const id = e.target.id // ㅇ
            const member_info = this.member_info // ㅇ
            const image = this.image // ㅇ
 
            form.append('id', id)
            form.append('member_info', member_info)
            form.append('image', image)

            axios.post("/api/member", form, config)
                .then(res =>
                {
                    this.$router.push('/member') 
                })
                .catch(err => {
                console.log(err)
            });
        }
    }
}
</script>

<<components\MemberList.vue>>

<template>
    <div class="all">
        <div class="body">
            <section class="MOD_ACCORDION1">
                <div data-layout="_r">
                    <div data-layout="al16">
                        <div class="AP_accordion" role="tablist">
                            <div v-for="member in members" :key="member.id"> <!-- 반복문 v-for 조원 생성 -->
                            <p class="AP_accordion_tab" role="tab" data-theme="_bgp1" tabindex="0"> {{ member.id }}. {{ member.user.name }}</p>
                            <div class="AP_accordion_panel" role="tabpanel"> <!-- 화면 상에 보여지는 탭 -->
                                <img src="/image/bird.jpg" class="mem1"> <!-- 탭 클릭했을 때 보이는 조원1의 배경사진 -->
                                <div id="member_member1Hidden"> <!-- 탭을 클릭 했을 때 보이는 조원1의 사진, 이름, 한줄소개 -->
                                    <img :src="'images/'+member.imagename" id="member_member1Image" alt="조원사진"><br />
                                    이름 : <p id="member_member1Name"> {{ member.user.name }}</p>
                                    소개 : <p id="member_member1Intro"> {{ member.member_info }}</p>
                                    <div> <!-- lv이 2인 관리자만 보이게 만들기 session 필요 또한 자기것만 보이게 -->
                                    <input @click="update" type="button" value="수정하기" :id="member.id">
                                    <input @click="destroy" type="button" value="삭제하기" :id="member.id">
                                    </div>
                                </div>
                            </div>
                            </div>
                            <!-- lv이 2인 관리자만 보이게 만들기 session 필요 -->
                            <p @click="create" class="AP_accordion_tab" role="tab" data-theme="_bgp2" tabindex="0" id="1">생성하기</p> <!-- 로그인 유저 아이디 -->
                        </div>
                    </div>
                </div>
            </section>
        </div>
    </div>
</template>
<script>
export default {
    data() {
        return {
            members:{},
            lv: 2,
        }
    },
    mounted() {
        Axios.get("/api/member")
        .then(res => 
        {
            this.members=res.data.member
        })
        .catch(err=> {
            console.log(err)
        });    
    },
    methods: {
        create(e) {
            let id = e.target.id
            this.$router.push({name: 'MemberCreate', params: {"user_id" : id}}) // 로그인 아이디 필요
        },
        update(e) {
            let id = e.target.id
            this.$router.push({name: 'MemberUpdate', params: {"user_id" : id}})
        },
        destroy(e) {
            let id = e.target.id
            axios.delete(`/api/member/${id}`)
                .then(res =>
                {
                    this.members=res.data.member
                    console.log(res.data.member)
                })
                .catch(err => {
                console.log(err)
            })
        }
    }
}
</script>

<<MemberUpdate.vue>>

<template>
    <div class="all">
        <div class="body">
            <section class="MOD_ACCORDION1">
                <div data-layout="_r">
                    <div data-layout="al16">
                        <div class="AP_accordion" role="tablist"><!-- 로그인 세션 아이디 점검 -->
                            <p class="AP_accordion_tab" role="tab" data-theme="_bgp1" tabindex="0">수정하기</p>
                            <div class="AP_accordion_panel" role="tabpanel"> <!-- 화면 상에 보여지는 탭 -->
                                <img src="/image/bird.jpg" class="mem1"> <!-- 탭 클릭했을 때 보이는 조원1의 배경사진 -->
                                <div id="member_member1Hidden"> <!-- 탭을 클릭 했을 때 보이는 조원1의 사진, 이름, 한줄소개 -->
                                    <img :src="'/images/'+member.imagename" id="member_member1Image"><br />
                                    이름 : <p>{{ member.user.name }}</p>
                                    소개 : <input type="text" v-model="member_info" :placeholder="member.member_info"> <br />
                                    이미지 : <input type="file" v-on:change="onImageChange" :id="member.id"> <br />
                                    <input type="button" value="수정하기" @click="update">
                                    <input type="button" value="뒤로가기" @click="back">
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
        </div>
    </div>
</template>
<script>
export default {
    data() {
        return {
            member : { user :{ name : '로딩중' }, imagename : '로딩중', member_info : '로딩중' }, // 시간차 렌더
            member_info : '',
            image :'',
        }
    },
    mounted() {
        const user_id = this.$route.params.user_id;
        Axios.get(`/api/member/${user_id}`)
        .then(res => 
        {
            this.member=res.data.member[0]
        })
        .catch(err=> {
            console.log(err)
        });   
    },
    methods: {
        back() {
            this.$router.push('/member')
        },
        update(e) {
            let config = {
                headers: {
                    processData: true, 
                    contentType: "multipart/form-data", 
                }
            } 

            const form = new FormData()
            const id = this.$route.params.user_id
            const member_info = this.member_info
            const image = this.image
            form.append('_method', 'patch')
            form.append('id', id)
            form.append('member_info', member_info)
            form.append('image',image)

            Axios.post(`/api/member/${id}`, form, config)
            .then(res => {
                this.$router.push('/member')
            })
            .catch(err => {
                console.log(err)
            });
        },
        onImageChange(e){ // 이미지 파일 찾아내기
            this.image = e.target.files[0]
            console.log(e.target.files[0])
        }
    }
}
</script>

<<app.js>>

require('./bootstrap');

window.Vue = require('vue');

window.VueRouter=require('vue-router').default;

window.VueAxios=require('vue-axios').default;

window.Axios=require('axios').default;

Vue.use(VueRouter, VueAxios, axios);

import Parent from './components/App'
import Main from './components/MainComponent'
import Login from './components/LoginComponent'
import Join from './components/JoinComponent'
import MemberList from './components/MemberList'
import MemberCreate from './components/MemberCreate'
import MemberUpdate from './components/MemberUpdate'
import Japan from './components/JapanComponent'
import QnAList from './components/QnAList'
import QnACreate from './components/QnACreate'
import QnAView from './components/QnAView'

const router = new VueRouter({
    mode : 'history',
    routes : [
        {
            path : '/',
            name : 'Main',
            component : Main
        },
        {
            path : '/login',
            name : 'Login',
            component : Login
        },
        {
            path : '/join',
            name : 'Join',
            component : Join
        },
        {
            path : '/member', // 목록 출력하기
            name : 'MemberList',
            component : MemberList
        },
        {
            path : '/member/create', // 생성하기
            name : 'MemberCreate',
            component : MemberCreate,
            props : true
        },
        {
            path : '/member/update', // 수정하기
            name : 'MemberUpdate',
            component : MemberUpdate,
            props : true
        },
        {
            path : '/japan',
            name : 'Japan',
            component : Japan
        },
        {
            path : '/qna',
            name : 'QnAList',
            component : QnAList
        },
        {
            path : '/qna/create',
            name : 'QnACreate',
            component : QnACreate
        },
        {
            path : '/qna/view',
            name : 'QnAView',
            component : QnAView,
            props : true
        },
    ]
});

const app = new Vue({
    el : '#app',
    router,
    render : (h) => h(Parent)
});

<<api.php>>

Route::resource('/member', 'MemberController');
